/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get application health status */
        get: operations["health.getHealth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all tasks */
        get: operations["task.getAllTasks"];
        put?: never;
        /** Create a new task */
        post: operations["task.createTask"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{taskId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a task */
        get: operations["task.getTask"];
        /** Update a task */
        put: operations["task.updateTask"];
        post?: never;
        /** Delete a task */
        delete: operations["task.deleteTask"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        task: {
            /**
             * @description The unique identifier for the task
             * @example 12345
             */
            id: string;
            /**
             * @description The title of the task
             * @example Sample Task
             */
            title: string;
        };
        taskCreate: {
            /**
             * @description The title of the task
             * @example Sample Task
             */
            title: string;
        };
        taskUpdate: {
            /**
             * @description The title of the task
             * @example Updated Task
             */
            title?: string;
        };
        healthStatus: {
            /**
             * @description Overall application health status
             * @example UP
             * @enum {string}
             */
            status: "UP" | "DOWN";
            /**
             * Format: date-time
             * @description Timestamp of the health check
             * @example 2024-01-15T10:30:00Z
             */
            timestamp: string;
            /** @description Health status of individual components */
            components: {
                database?: components["schemas"]["healthComponent"];
            };
        };
        healthComponent: {
            /**
             * @description Component health status
             * @example UP
             * @enum {string}
             */
            status: "UP" | "DOWN";
            /**
             * @description Additional component details
             * @example {
             *       "connection": "PostgreSQL",
             *       "responseTime": "5ms"
             *     }
             */
            details?: Record<string, never>;
        };
        error: {
            /**
             * @description Error code
             * @example 400
             */
            code: number;
            /**
             * @description Error message
             * @example Bad Request
             */
            message: string;
            /**
             * @description Additional error details
             * @example Invalid input parameters
             */
            details?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "health.getHealth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Application is healthy */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "UP",
                     *       "timestamp": "2024-01-15T10:30:00Z",
                     *       "components": {
                     *         "database": {
                     *           "status": "UP",
                     *           "details": {
                     *             "connection": "PostgreSQL",
                     *             "responseTime": "5ms"
                     *           }
                     *         }
                     *       }
                     *     } */
                    "application/json": components["schemas"]["healthStatus"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 500,
                     *       "message": "Internal Server Error",
                     *       "details": "Health check service unavailable"
                     *     } */
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Application is unhealthy */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "DOWN",
                     *       "timestamp": "2024-01-15T10:30:00Z",
                     *       "components": {
                     *         "database": {
                     *           "status": "DOWN",
                     *           "details": {
                     *             "error": "Connection refused"
                     *           }
                     *         }
                     *       }
                     *     } */
                    "application/json": components["schemas"]["healthStatus"];
                };
            };
        };
    };
    "task.getAllTasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of tasks */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["task"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 401,
                     *       "message": "Unauthorized",
                     *       "details": "User ID not found in token"
                     *     } */
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 500,
                     *       "message": "Internal server error",
                     *       "details": "database connection failed"
                     *     } */
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "task.createTask": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["taskCreate"];
            };
        };
        responses: {
            /** @description Task created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["task"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 400,
                     *       "message": "Bad request",
                     *       "details": "title field is required and cannot be empty"
                     *     } */
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 401,
                     *       "message": "Unauthorized",
                     *       "details": "User ID not found in token"
                     *     } */
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 500,
                     *       "message": "Internal server error",
                     *       "details": "database connection failed"
                     *     } */
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "task.getTask": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the task to retrieve */
                taskId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A task object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["task"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 401,
                     *       "message": "Unauthorized",
                     *       "details": "User ID not found in token"
                     *     } */
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Task not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 404,
                     *       "message": "Task not found"
                     *     } */
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 500,
                     *       "message": "Internal server error",
                     *       "details": "database connection failed"
                     *     } */
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "task.updateTask": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the task to update */
                taskId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["taskUpdate"];
            };
        };
        responses: {
            /** @description Task updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["task"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 400,
                     *       "message": "Bad request",
                     *       "details": "task title cannot exceed 255 characters"
                     *     } */
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 401,
                     *       "message": "Unauthorized",
                     *       "details": "User ID not found in token"
                     *     } */
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Task not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 404,
                     *       "message": "Task not found"
                     *     } */
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 500,
                     *       "message": "Internal server error",
                     *       "details": "database connection failed"
                     *     } */
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "task.deleteTask": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the task to delete */
                taskId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Task deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 401,
                     *       "message": "Unauthorized",
                     *       "details": "User ID not found in token"
                     *     } */
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Task not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 404,
                     *       "message": "Task not found"
                     *     } */
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 500,
                     *       "message": "Internal server error",
                     *       "details": "database connection failed"
                     *     } */
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
}
